#
# Developemnt server Ansible playbook
# apt update && apt install --yes ansible && ansible-pull --url https://github.com/overshard/dev-server/ && reboot
#
---
- hosts: localhost
  connection: local
  become_user: root
  become: yes
  vars:
    username: isaac

  tasks:
    - name: PACKAGES - Upgrade all packages
      apt:
        update_cache: yes
        upgrade: full
        state: latest

    - name: PACKAGES - Install required system packages
      apt:
        state: latest
        pkg:
          - wget
          - curl
          - neovim
          - git
          - ufw
          - redis
          - postgresql
          - python3-psycopg2
          - acl
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - llvm
          - libncurses5-dev
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libffi-dev
          - liblzma-dev
          - python-openssl
          - libpq-dev

    - name: USERS - Create a new regular user with sudo privileges
      user:
        name: "{{ username }}"
        state: present
        groups: sudo
        append: true
        create_home: true
        shell: /bin/bash

    - name: USERS - Allow new users to passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%sudo	ALL="
        line: "%sudo	ALL=(ALL:ALL) NOPASSWD:ALL"
        validate: /usr/sbin/visudo -cf %s

    - name: USERS - Set authorized key for remote user
      authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/authorized_keys') }}"

    - name: USERS - Disable SSH access for the root account
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"

    - name: USERS - Lock password for the root account
      user:
        name: root
        password: "!"

    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming

    - name: POSTGRESQL - Create development user
      become_user: postgres
      no_log: yes
      postgresql_user:
        name: "{{ username }}"
        role_attr_flags: SUPERUSER

    - name: POSTGRESQL - Create development DB
      become_user: postgres
      postgresql_db:
        name: "{{ username }}"
        owner: "{{ username }}"

    - name: POSTGRESQL - Trust local access ipv4
      lineinfile:
        path: /etc/postgresql/12/main/pg_hba.conf
        state: present
        regexp: "^host    all             all             127.0.0.1/32            "
        line: "host    all             all             127.0.0.1/32            trust"

    - name: POSTGRESQL - Trust local access ipv6
      lineinfile:
        path: /etc/postgresql/12/main/pg_hba.conf
        state: present
        regexp: "^host    all             all             ::1/128                 "
        line: "host    all             all             ::1/128                 trust"

    - name: NVM - Install nvm
      become_user: "{{ username }}"
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.0/install.sh | bash
      args:
        creates: "/home/{{ username }}/.nvm/nvm.sh"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash

    - name: NVM - Install node
      become_user: "{{ username }}"
      shell: |
        . /home/{{ username }}/.nvm/nvm.sh && nvm install {{ item }}
      args:
        creates: "/home/{{ username }}/.nvm/versions/node/{{ item }}"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash
      loop:
        - v15.1.0

    - name: NVM - Install yarn
      become_user: "{{ username }}"
      shell: |
        . /home/{{ username }}/.nvm/nvm.sh && npm install -g yarn
      args:
        creates: "/home/{{ username }}/.nvm/versions/node/v15.1.0/bin/yarn"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash

    - name: PYENV - Install pyenv
      become_user: "{{ username }}"
      shell: |
        curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
      args:
        creates: "/home/{{ username }}/.pyenv"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash

    - name: PYENV - Add bash config
      become_user: "{{ username }}"
      blockinfile:
        path: /home/{{ username }}/.bashrc
        block: |
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"

    - name: PYENV - Install python versions
      become_user: "{{ username }}"
      shell: |
        /home/{{ username }}/.pyenv/bin/pyenv install {{ item }}
      args:
        creates: "/home/{{ username }}/.pyenv/versions/{{ item }}"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash
      loop:
        - 2.7.18
        - 3.6.10
        - 3.7.7
        - 3.8.3
        - 3.9.0

    - name: PYENV - Set global python to 3.9.0
      become_user: "{{ username }}"
      shell: |
        /home/{{ username }}/.pyenv/bin/pyenv global 3.9.0
      args:
        creates: "/home/{{ username }}/.pyenv/version"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash

    - name: PYENV - Install pipenv for 3.9.0
      become_user: "{{ username }}"
      shell: |
        /home/isaac/.pyenv/versions/3.9.0/bin/pip install pipenv
      args:
        creates: "/home/{{ username }}/.pyenv/versions/3.9.0/lib/python3.9/site-packages/pipenv"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash

    - name: HEROKU - Install Heroku CLI
      become_user: "{{ username }}"
      shell: |
        curl https://cli-assets.heroku.com/install.sh | sh
      args:
        creates: "/usr/local/bin/heroku"
        chdir: "/home/{{ username }}/"
        executable: /bin/bash
